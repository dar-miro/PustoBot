from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

ASK_NICKNAME, ASK_ROLES = range(2)
ROLES_LIST = ["–ö–ª—ñ–Ω–µ—Ä", "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", "–¢–∞–π–ø–µ—Ä", "–†–µ–¥–∞–∫—Ç–æ—Ä"]

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∞—Ä–∫—É—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def get_user_sheet(sheet):
    try:
        return sheet.spreadsheet.worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    except:
        return sheet.spreadsheet.add_worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", rows=100, cols=3)

# –°—Ç–∞—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
async def start_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ö†Ô∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")
        return ConversationHandler.END

    await update.message.reply_text("üë§ –í–≤–µ–¥–∏ –±–∞–∂–∞–Ω–∏–π –Ω—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: darmiro):")
    return ASK_NICKNAME

# –ó–∞–ø–∏—Ç–∞—Ç–∏ —Ä–æ–ª—ñ
async def ask_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nickname"] = update.message.text.strip()
    await update.message.reply_text(
        "üõ† –í–≤–µ–¥–∏ —Ä–æ–ª—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–ª—ñ–Ω–µ—Ä, –¢–∞–π–ø–µ—Ä).\n"
        "–ú–æ–∂–ª–∏–≤—ñ —Ä–æ–ª—ñ: –ö–ª—ñ–Ω–µ—Ä, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –¢–∞–π–ø–µ—Ä, –†–µ–¥–∞–∫—Ç–æ—Ä"
    )
    return ASK_ROLES

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def finish_register(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet):
    roles = update.message.text.strip()
    nickname = context.user_data.get("nickname", "")
    telegram_name = update.message.from_user.full_name

    user_sheet = get_user_sheet(sheet)
    headers = user_sheet.row_values(1)
    if not headers:
        user_sheet.insert_row(["Telegram-–Ω—ñ–∫", "–ù—ñ–∫", "–†–æ–ª—ñ"], index=1)

    user_sheet.append_row([telegram_name, nickname, roles])

    await update.message.reply_text("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±–≥–æ—Ä—Ç–∫–∞, —â–æ–± sheet –ø–µ—Ä–µ–¥–∞—Ç–∏
def get_register_handler(sheet):
    return ConversationHandler(
        entry_points=[CommandHandler("register", start_register)],
        states={
            ASK_NICKNAME: [MessageHandler(filters.TEXT & (~filters.COMMAND), ask_roles)],
            ASK_ROLES: [MessageHandler(filters.TEXT & (~filters.COMMAND), lambda u, c: finish_register(u, c, sheet))],
        },
        fallbacks=[CommandHandler("cancel", cancel_register)],
        allow_reentry=True
    )
