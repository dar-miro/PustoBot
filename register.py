from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
import logging
import gspread 
from PustoBot.sheets import (
    load_nickname_map, 
    append_log_row, 
    get_user_sheet,
    find_user_row_by_nick_or_tag, # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    update_user_row,             # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    append_user_row              # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
)

logger = logging.getLogger(__name__)

# –ù–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
ASK_NICKNAME, CONFIRM_OVERWRITE, ASK_ROLES = range(3)
ROLES_LIST = ["–ö–ª—ñ–Ω–µ—Ä", "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", "–¢–∞–π–ø–µ—Ä", "–†–µ–¥–∞–∫—Ç–æ—Ä"]

# –°—Ç–∞—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
async def start_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ö†Ô∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")
        return ConversationHandler.END

    await update.message.reply_text("üë§ –í–≤–µ–¥–∏ –±–∞–∂–∞–Ω–∏–π –Ω—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: darmiro):", reply_markup=ReplyKeyboardRemove())
    return ASK_NICKNAME

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –Ω—ñ–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
async def handle_nickname_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desired_nick = update.message.text.strip()
    telegram_full_name = update.message.from_user.full_name
    telegram_username = update.message.from_user.username # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–≥ —Ç–µ–ª–µ–≥—Ä–∞–º—É

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.user_data["desired_nick"] = desired_nick
    context.user_data["telegram_full_name"] = telegram_full_name
    context.user_data["telegram_username"] = telegram_username if telegram_username else "" # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ —Ü–µ –Ω–µ None

    main_spreadsheet_instance = context.bot_data.get('main_spreadsheet_instance')
    if main_spreadsheet_instance is None:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Ç–∞–±–ª–∏—Ü—å. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.error("main_spreadsheet_instance is None in handle_nickname_input.")
        return ConversationHandler.END

    # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    existing_row_index, existing_row_data = find_user_row_by_nick_or_tag(
        telegram_full_name, telegram_username, desired_nick
    )

    if existing_row_index:
        context.user_data["existing_row_index"] = existing_row_index
        context.user_data["existing_row_data"] = existing_row_data
        
        reply_keyboard = [
            [KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")]
        ]
        await update.message.reply_text(
            f"‚ÑπÔ∏è –ó–¥–∞—î—Ç—å—Å—è, –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ, –∞–±–æ —Ü–µ–π –Ω—ñ–∫/Telegram-–Ω—ñ–∫ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.\\n"
            f"–ó–Ω–∞–π–¥–µ–Ω–æ: Telegram-–Ω—ñ–∫: '{existing_row_data[0]}', –¢–µ–≥: '{existing_row_data[1]}', –ù—ñ–∫: '{existing_row_data[2]}', –†–æ–ª—ñ: '{existing_row_data[3]}'\\n"
            f"–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ (–Ω–æ–≤–∏–π –Ω—ñ–∫ '{desired_nick}' —Ç–∞ —Ç–µ–≥ '{telegram_username if telegram_username else '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}')?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CONFIRM_OVERWRITE
    else:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Ç—É —Ä–æ–ª–µ–π
        await update.message.reply_text(
            "üõ† –í–≤–µ–¥–∏ —Ä–æ–ª—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–ª—ñ–Ω–µ—Ä, –¢–∞–π–ø–µ—Ä).\\n"
            "–ú–æ–∂–ª–∏–≤—ñ —Ä–æ–ª—ñ: –ö–ª—ñ–Ω–µ—Ä, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –¢–∞–π–ø–µ—Ä, –†–µ–¥–∞–∫—Ç–æ—Ä",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_ROLES

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É
async def confirm_overwrite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text.strip().lower()

    if user_choice == "—Ç–∞–∫":
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
        existing_row_index = context.user_data["existing_row_index"]
        desired_nick = context.user_data["desired_nick"]
        telegram_full_name = context.user_data["telegram_full_name"]
        telegram_username = context.user_data["telegram_username"]
        
        # –ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ —Ä–æ–ª—ñ —â–µ –Ω–µ –≤—ñ–¥–æ–º—ñ, —Ç–æ–º—É –æ–Ω–æ–≤–∏–º–æ —ó—Ö –ø—ñ–∑–Ω—ñ—à–µ
        # –ê–±–æ –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ä—ñ —Ä–æ–ª—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–∞—Ä–∞–∑, –º–∏ —ó—Ö –∑–∞–ø–∏—Ç–∞—î–º–æ –∑–Ω–æ–≤—É –∞–±–æ –∑–∞–ª–∏—à–∏–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ

        # –ü—Ä–æ—Å–∏–º–æ —Ä–æ–ª—ñ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É
        await update.message.reply_text(
            "üõ† –î–æ–±—Ä–µ, –¥–∞–Ω—ñ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤–æ—ó —Ä–æ–ª—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–ª—ñ–Ω–µ—Ä, –¢–∞–π–ø–µ—Ä).\\n"
            "–ú–æ–∂–ª–∏–≤—ñ —Ä–æ–ª—ñ: –ö–ª—ñ–Ω–µ—Ä, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –¢–∞–π–ø–µ—Ä, –†–µ–¥–∞–∫—Ç–æ—Ä",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_ROLES
    elif user_choice == "–Ω—ñ":
        await update.message.reply_text("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        reply_keyboard = [
            [KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")]
        ]
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CONFIRM_OVERWRITE # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –Ω–∞ —Ü—å–æ–º—É –∂ –∫—Ä–æ—Ü—ñ

# –ó–∞–ø–∏—Ç–∞—Ç–∏ —Ä–æ–ª—ñ (–ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –Ω—ñ–∫—É –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É)
async def ask_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    roles = update.message.text.strip()
    context.user_data["roles"] = roles # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–ª—ñ

    # –¢–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    return await finish_register(update, context)


# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (—Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è)
async def finish_register(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    desired_nick = context.user_data.get("desired_nick", "")
    telegram_full_name = context.user_data.get("telegram_full_name", "")
    telegram_username = context.user_data.get("telegram_username", "")
    roles = context.user_data.get("roles", "")
    existing_row_index = context.user_data.get("existing_row_index", None)

    main_spreadsheet_instance = context.bot_data.get('main_spreadsheet_instance')
    if main_spreadsheet_instance is None:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Ç–∞–±–ª–∏—Ü—å. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.error("main_spreadsheet_instance is None in finish_register.")
        return ConversationHandler.END

    if existing_row_index:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ä—è–¥–æ–∫
        success = update_user_row(
            existing_row_index, telegram_full_name, telegram_username, desired_nick, roles
        )
        if success:
            await update.message.reply_text("‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
    else:
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
        success = append_user_row(
            telegram_full_name, telegram_username, desired_nick, roles
        )
        if success:
            await update.message.reply_text("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
    
    # –û—á–∏—â–∞—î–º–æ user_data –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
    context.user_data.clear()
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear() # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ
    return ConversationHandler.END

# –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
def get_register_handler(main_spreadsheet_instance):
    async def _start_register_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await start_register(update, context)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    async def _handle_nickname_input_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await handle_nickname_input(update, context)
    
    async def _confirm_overwrite_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await confirm_overwrite(update, context)
    
    async def _ask_roles_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await ask_roles(update, context)
    
    async def _finish_register_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await finish_register(update, context)


    return ConversationHandler(
        entry_points=[CommandHandler("register", _start_register_with_context)],
        states={
            ASK_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, _handle_nickname_input_with_context)],
            CONFIRM_OVERWRITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, _confirm_overwrite_with_context)],
            ASK_ROLES: [MessageHandler(filters.TEXT & ~filters.COMMAND, _ask_roles_with_context)],
        },
        fallbacks=[CommandHandler("cancel", cancel_register)],
    )