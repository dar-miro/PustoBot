from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import gspread
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
import logging
# sheets —ñ–º–ø–æ—Ä—Ç—É—î–º–æ, –∞–ª–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç—É—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ
from PustoBot.sheets import load_nickname_map, append_log_row # –î–æ–¥–∞–Ω–æ import

logger = logging.getLogger(__name__)

ASK_NICKNAME, ASK_ROLES = range(2)
ROLES_LIST = ["–ö–ª—ñ–Ω–µ—Ä", "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", "–¢–∞–π–ø–µ—Ä", "–†–µ–¥–∞–∫—Ç–æ—Ä"]

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∞—Ä–∫—É—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î `main_spreadsheet_instance` —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
def get_user_sheet(main_spreadsheet_instance):
    if main_spreadsheet_instance is None:
        logger.error("main_spreadsheet_instance is None in get_user_sheet.")
        return None
    try:
        return main_spreadsheet_instance.worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    except gspread.exceptions.WorksheetNotFound:
        logger.warning("Worksheet '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ' not found, creating a new one.")
        return main_spreadsheet_instance.add_worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", rows=100, cols=3)
    except Exception as e:
        logger.error(f"Error getting or creating '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ' sheet: {e}")
        return None

# –°—Ç–∞—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
async def start_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ö†Ô∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")
        return ConversationHandler.END

    await update.message.reply_text("üë§ –í–≤–µ–¥–∏ –±–∞–∂–∞–Ω–∏–π –Ω—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: darmiro):")
    return ASK_NICKNAME

# –ó–∞–ø–∏—Ç–∞—Ç–∏ —Ä–æ–ª—ñ
async def ask_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nickname"] = update.message.text.strip()
    await update.message.reply_text(
        "üõ† –í–≤–µ–¥–∏ —Ä–æ–ª—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–ª—ñ–Ω–µ—Ä, –¢–∞–π–ø–µ—Ä).\\n"
        "–ú–æ–∂–ª–∏–≤—ñ —Ä–æ–ª—ñ: –ö–ª—ñ–Ω–µ—Ä, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –¢–∞–π–ø–µ—Ä, –†–µ–¥–∞–∫—Ç–æ—Ä"
    )
    return ASK_ROLES

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def finish_register(update: Update, context: ContextTypes.DEFAULT_TYPE): # sheet –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—É—Ç
    roles = update.message.text.strip()
    nickname = context.user_data.get("nickname", "")
    telegram_name = update.message.from_user.full_name

    # sheet —Ç–µ–ø–µ—Ä –±–µ—Ä–µ—Ç—å—Å—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–π import,
    # –∞–ª–µ –≤–∞–∂–ª–∏–≤—ñ—à–µ, —â–æ get_user_sheet –≤–∏–º–∞–≥–∞—î main_spreadsheet_instance.
    # main_spreadsheet_instance –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ get_register_handler
    # —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É Context (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ), –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –∑ sheets.py
    # –û—Å–∫—ñ–ª—å–∫–∏ `get_user_sheet` –≤–∏–º–∞–≥–∞—î `main_spreadsheet_instance`, –∞ –Ω–µ `sheet` (titles_sheet),
    # –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Å–∞–º–µ `main_spreadsheet` –∑ `sheets.py` —á–µ—Ä–µ–∑ handler.
    # Context.bot.main_spreadsheet –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–±.
    
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –æ—Ç—Ä–∏–º–∞—Ç–∏ main_spreadsheet_instance –∑ context, —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
    # –Ø–∫—â–æ –≤—ñ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –∑ sheets.py –Ω–∞–ø—Ä—è–º—É, –∞–ª–µ —Ü–µ –º–µ–Ω—à —á–∏—Å—Ç–æ.
    # –ü—Ä–æ—Å—Ç—ñ—à–µ, —â–æ–± get_register_handler –ø–µ—Ä–µ–¥–∞–≤–∞–≤ –π–æ–≥–æ.
    main_spreadsheet_instance = context.bot_data.get('main_spreadsheet_instance')
    
    if main_spreadsheet_instance is None:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Ç–∞–±–ª–∏—Ü—å. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.error("main_spreadsheet_instance is None in finish_register.")
        return ConversationHandler.END

    user_sheet = get_user_sheet(main_spreadsheet_instance)
    if user_sheet is None:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—Ä–∫—É—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    try:
        headers = user_sheet.row_values(1)
        if not headers or len(headers) < 3: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
            user_sheet.insert_row(["Telegram-–Ω—ñ–∫", "–ù—ñ–∫", "–†–æ–ª—ñ"], index=1)
            headers = user_sheet.row_values(1) # –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏

        user_sheet.append_row([telegram_name, nickname, roles])

        await update.message.reply_text("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±–≥–æ—Ä—Ç–∫–∞, —â–æ–± sheet –ø–µ—Ä–µ–¥–∞—Ç–∏ (main_spreadsheet_instance)
def get_register_handler(main_spreadsheet_instance):
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ main_spreadsheet_instance —É bot_data, —â–æ–± –≤—ñ–Ω –±—É–≤ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É —Å—Ç–∞–Ω–∞—Ö
    async def _start_register_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await start_register(update, context)

    async def _finish_register_with_context(update, context):
        context.bot_data['main_spreadsheet_instance'] = main_spreadsheet_instance
        return await finish_register(update, context)

    return ConversationHandler(
        entry_points=[CommandHandler("register", _start_register_with_context)],
        states={
            ASK_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_roles)],
            ASK_ROLES: [MessageHandler(filters.TEXT & ~filters.COMMAND, _finish_register_with_context)],
        },
        fallbacks=[CommandHandler("cancel", cancel_register)],
    )