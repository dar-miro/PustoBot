import logging
from telegram import Update
from telegram.ext import ContextTypes
from PustoBot.sheets import get_title_data, normalize_title, titles_sheet

logger = logging.getLogger(__name__)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet):
    """–ù–∞–¥–∞—î —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ç–∞–π—Ç–ª—É."""
    message = update.message
    if not message or not message.text:
        return
    
    text = message.text[len("/status "):].strip()
    title = text
    
    if not title:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/status –í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞`")
        return
    
    if titles_sheet is None:
        logger.error("titles_sheet –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å.")
        await update.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –∞—Ä–∫—É—à '–¢–∞–π—Ç–ª–∏' –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return

    try:
        title_data, headers = get_title_data(title, titles_sheet)
        if title_data is None:
            await update.message.reply_text(f"‚ö†Ô∏è –¢–∞–π—Ç–ª '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        response = f"üìä *–°—Ç–∞—Ç—É—Å —Ç–∞–π—Ç–ª—É '{title}':*\n\n"
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ä–æ–ª—ñ
        role_map = {
            "–ö–ª—ñ–Ω": [], "–ü–µ—Ä–µ–∫–ª–∞–¥": [],
            "–¢–∞–π–ø": [], "–†–µ–¥–∞–∫—Ç": []
        }
        
        main_headers = titles_sheet.row_values(titles_sheet.find(title).row)
        sub_headers = titles_sheet.row_values(titles_sheet.find(title).row + 1)
        
        for i, header in enumerate(main_headers):
            if header in role_map:
                status_col_idx = sub_headers.index("–°—Ç–∞—Ç—É—Å", i)
                role_map[header].append(status_col_idx)

        for row in title_data:
            if not row or not row[0].strip():
                continue

            chapter_number = row[0].strip()
            chapter_status = row[-1] if len(row) > 0 else '‚ùå'
            
            status_text = "‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ" if chapter_status == "‚úÖ" else "‚ùå –ù–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"
            
            response += f"*{chapter_number}* ‚Äî {status_text}\n"

        await update.message.reply_text(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.")