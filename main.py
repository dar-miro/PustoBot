import logging
import re
import gspread
import asyncio
import os
import sys
import json
from aiohttp import web
from datetime import datetime
import gspread.utils
from telegram import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from typing import List, Tuple

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
GOOGLE_CREDENTIALS_FILE = os.environ.get("GOOGLE_CREDENTIALS_FILE", 'credentials.json')
SPREADSHEET_KEY = os.environ.get("SPREADSHEET_KEY")

WEB_APP_ENTRYPOINT = "/miniapp" 

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä–æ–ª–µ–π
ROLE_TO_COLUMN_BASE = {
    "–∫–ª—ñ–Ω": "–ö–ª—ñ–Ω",
    "–ø–µ—Ä–µ–∫–ª–∞–¥": "–ü–µ—Ä–µ–∫–ª–∞–¥",
    "—Ç–∞–π–ø": "–¢–∞–π–ø",
    "—Ä–µ–¥": "–†–µ–¥–∞–∫—Ç",
}
PUBLISH_COLUMN_BASE = "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è"

# –®–∞–±–ª–æ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –∫–æ–º–∞–Ω–¥–∏ /updatestatus "–¢–∞–π—Ç–ª" <‚Ññ –†–æ–∑–¥—ñ–ª—É> <–†–æ–ª—å> <–î–∞—Ç–∞ YYYY-MM-DD> <+>
UPDATE_STATUS_PATTERN = re.compile(r'/updatestatus \"(.+?)\"\s+([\d\.]+)\s+(–∫–ª—ñ–Ω|–ø–µ—Ä–µ–∫–ª–∞–¥|—Ç–∞–π–ø|—Ä–µ–¥)\s+([\d]{4}-[\d]{2}-[\d]{2})\s+\+')

# ==============================================================================
# HTTP –û–ë–†–û–ë–ù–ò–ö–ò (AIOHTTP)
# ==============================================================================

async def miniapp(request: web.Request):
    """–í—ñ–¥–¥–∞—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É Mini App."""
    return web.FileResponse("webapp/index.html")

async def webhook_handler(request: web.Request):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ webhook –≤—ñ–¥ Telegram."""
    update = Update.de_json(await request.json(), request.app['bot_app'].bot)
    asyncio.create_task(request.app['bot_app'].process_update(update))
    return web.Response()

# ==============================================================================
# GOOGLE SHEETS HELPER
# ==============================================================================

class SheetsHelper:
    def __init__(self, spreadsheet_key):
        self.spreadsheet_key = spreadsheet_key
        self.gc = None
        self.spreadsheet = None
        self.users_cache = {}
        asyncio.create_task(self._authorize_and_connect())

    async def _authorize_and_connect(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."""
        try:
            if os.path.exists(GOOGLE_CREDENTIALS_FILE):
                self.gc = gspread.service_account(filename=GOOGLE_CREDENTIALS_FILE)
            else:
                logger.error("–§–∞–π–ª Google Credentials –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                sys.exit(1)
                
            self.spreadsheet = self.gc.open_by_key(self.spreadsheet_key)
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —É—Å–ø—ñ—à–Ω–µ.")
            self._load_users_cache()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
            self.spreadsheet = None

    def _load_users_cache(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º–∏ –∑ –∞—Ä–∫—É—à–∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ."""
        if not self.spreadsheet: return
        try:
            # ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Ä–∫—É—à–∞ "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"
            users_ws = self.spreadsheet.worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
            records = users_ws.get_all_records()
            self.users_cache = {
                int(record['Telegram ID']): record['–ù—ñ–∫']
                for record in records if 'Telegram ID' in record and '–ù—ñ–∫' in record and str(record['Telegram ID']).isdigit()
            }
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.users_cache)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –∫–µ—à.")
        except gspread.WorksheetNotFound:
            logger.error("–ê—Ä–∫—É—à '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")

    def get_nickname_by_id(self, user_id: int) -> str | None:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω—ñ–∫–Ω–µ–π–º –∑–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.users_cache.get(user_id)
    
    def _log_action(self, telegram_tag, nickname, title, chapter, role):
        """–õ–æ–≥—É—î –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∞—Ä–∫—É—à—ñ LOG (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)."""
        if not self.spreadsheet: return
        try:
            log_ws = self.spreadsheet.worksheet("LOG")
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_ws.append_row([
                now, telegram_tag, nickname, title, chapter, role, "UPDATE"
            ])
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –¥—ñ—ó: {e}")

    def update_chapter_status(self, title_name: str, chapter_number: str, role_key: str, date: str, status_symbol: str, nickname: str, telegram_tag: str) -> str:
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤–∏ –¥–ª—è –ø–µ–≤–Ω–æ—ó —Ä–æ–ª—ñ."""
        if not self.spreadsheet: 
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets.")

        # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–±–æ—á–∏–π –∞—Ä–∫—É—à
        try:
            worksheet = self.spreadsheet.worksheet(title_name)
        except gspread.WorksheetNotFound:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ."
        
        # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—è–¥–æ–∫ —Ä–æ–∑–¥—ñ–ª—É
        try:
            chapters = worksheet.col_values(1) 
            if str(chapter_number) not in chapters[3:]: 
                return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –†–æ–∑–¥—ñ–ª {chapter_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ —Å–ø–æ—á–∞—Ç–∫—É."

            row_index = chapters.index(str(chapter_number)) + 1
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä–æ–∑–¥—ñ–ª—É {chapter_number}: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä–æ–∑–¥—ñ–ª—É {chapter_number}."
        
        # 3. –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        role_base = ROLE_TO_COLUMN_BASE.get(role_key) 
        if not role_base:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å: {role_key}."

        headers = worksheet.row_values(3) 
        
        col_name_nick = f'{role_base}-–ù—ñ–∫'
        col_name_date = f'{role_base}-–î–∞—Ç–∞'
        col_name_status = f'{role_base}-–°—Ç–∞—Ç—É—Å'

        try:
            col_index_nick = headers.index(col_name_nick) + 1
            col_index_date = headers.index(col_name_date) + 1
            col_index_status = headers.index(col_name_status) + 1

        except ValueError:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ê—Ä–∫—É—à '{title_name}' –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è —Ä–æ–ª—ñ '{role_base}'."

        # 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–ø–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
        updates = []
        updates.append({'range': gspread.utils.rowcol_to_a1(row_index, col_index_nick), 'values': [[nickname]]})
        updates.append({'range': gspread.utils.rowcol_to_a1(row_index, col_index_date), 'values': [[date]]})
        updates.append({'range': gspread.utils.rowcol_to_a1(row_index, col_index_status), 'values': [[status_symbol]]})
        
        worksheet.batch_update(updates)
        
        # 5. –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó
        self._log_action(
            telegram_tag=telegram_tag,
            nickname=nickname,
            title=title_name,
            chapter=chapter_number,
            role=role_base
        )
        
        return f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {title_name} - –†–æ–∑–¥—ñ–ª {chapter_number} ({role_base}) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {status_symbol} ({nickname})."

# ==============================================================================
# TELEGRAM –ë–û–¢: –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê –î–ê–ù–ò–•
# ==============================================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    
    # –î–æ—Å—Ç—É–ø –¥–æ sheets_helper
    sheets_helper = context.application.data.get('sheets_helper')
    nickname = sheets_helper.get_nickname_by_id(user.id) if sheets_helper else None
    
    if not nickname:
        message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n"
            "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register <–í–∞—à –ù—ñ–∫> –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )
        await update.message.reply_text(message)
        return

    # –ö–Ω–æ–ø–∫–∞ Mini App
    keyboard = [[
        InlineKeyboardButton(
            "üìù –û–Ω–æ–≤–∏—Ç–∏ –°—Ç–∞—Ç—É—Å", 
            web_app=WebAppInfo(url=WEBHOOK_URL.replace("/webhook", WEB_APP_ENTRYPOINT))
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {nickname}!\n–í–∞—à —Å—Ç–∞—Ç—É—Å: –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        reply_markup=reply_markup
    )

async def web_app_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ, –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∑ Mini App —á–µ—Ä–µ–∑ sendData()."""
    user = update.effective_user
    data = update.effective_message.web_app_data.data 
    
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ Mini App –≤—ñ–¥ {user.username} ({user.id}): {data}")

    match = UPDATE_STATUS_PATTERN.match(data)
    
    if match:
        await update_status_command(update, context, match.groups())
    else:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–æ–º–∞–Ω–¥–∏ Mini App. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç. –û—Ç—Ä–∏–º–∞–Ω–æ: `{data}`"
        await update.effective_message.reply_text(error_message)
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Mini App: {data}")
        
async def update_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE, args: Tuple[str, str, str, str, str]) -> None:
    """–í–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google Sheets."""
    
    title, chapter, role_key, date, status = args

    user = update.effective_user
    # –î–æ—Å—Ç—É–ø –¥–æ sheets_helper
    sheets_helper = context.application.data.get('sheets_helper')

    if not sheets_helper:
        await update.effective_message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –°–µ—Ä–≤—ñ—Å Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        return

    nickname = sheets_helper.get_nickname_by_id(user.id)
    if not nickname:
        await update.effective_message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í–∞—à Telegram ID ({user.id}) –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /register.")
        return
        
    try:
        result_message = sheets_helper.update_chapter_status(
            title_name=title,
            chapter_number=chapter,
            role_key=role_key,
            date=date,
            status_symbol=status, 
            nickname=nickname,
            telegram_tag=f"@{user.username}" if user.username else str(user.id)
        )
        await update.effective_message.reply_text(result_message)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {e}")
        await update.effective_message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –≤ —Ç–∞–±–ª–∏—Ü—ñ: {e}")

# ==============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ==============================================================================

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ aiohttp."""
    if not TELEGRAM_BOT_TOKEN or not WEBHOOK_URL or not SPREADSHEET_KEY:
        logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (TOKEN, WEBHOOK_URL, SPREADSHEET_KEY).")
        return

    # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ SheetsHelper
    sheets_helper = SheetsHelper(SPREADSHEET_KEY)

    # 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Telegram
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .build().application.data –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ PTB
    bot_app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    # –ü—Ä–∏—Å–≤–æ—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è .build() (–Ω–∞–π–±—ñ–ª—å—à —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–±)
    bot_app.application.data['sheets_helper'] = sheets_helper 
    
    # 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    parsed_url = web.URL(WEBHOOK_URL)
    webhook_path = parsed_url.path
    full_webhook_url = str(parsed_url.with_path(webhook_path))
    
    await bot_app.bot.set_webhook(url=full_webhook_url)
    logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Webhook –Ω–∞: {full_webhook_url}")
    
    # 4. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    bot_app.add_handler(CommandHandler("start", start_command))
    
    bot_app.add_handler(
        MessageHandler(
            filters.TEXT 
            & ~filters.COMMAND 
            & filters.UpdateType.WEB_APP_DATA, 
            web_app_data_handler
        )
    )

    # 5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ aiohttp
    aio_app = web.Application()
    aio_app['bot_app'] = bot_app 
    aio_app.add_routes([
        web.get('/health', lambda r: web.Response(text='OK')), 
        web.post(webhook_path, webhook_handler), 
        
        # --- –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–Ü–Ø –î–õ–Ø –ú–Ü–ù–Ü-–ó–ê–°–¢–û–°–£–ù–ö–£ ---
        web.get(WEB_APP_ENTRYPOINT, miniapp), 
        web.static(WEB_APP_ENTRYPOINT, path='webapp', name='static') 
    ])    

    # 6. –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(aio_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    logger.info(f"Starting web server on port {port}")
    await site.start()

    # –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É asyncio
    await asyncio.Event().wait()

if __name__ == '__main__':
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.error(f"Fatal error in main loop: {e}")