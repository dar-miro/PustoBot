import logging
import re
import gspread
import asyncio
import os
from aiohttp import web
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –í–ö–ê–ñ–Ü–¢–¨ –í–ê–®–Ü –î–ê–ù–Ü –¢–£–¢ ---

# –í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7392593867:AAHSNWTbZxS4BfEKJa3KG7SuhK2G9R5kKQA") # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑ ENVs
# URL –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞.
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://pustobot.onrender.com/") # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑ ENVs

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –∑ –∫–ª—é—á–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ Google API
GOOGLE_CREDENTIALS_FILE = 'credentials.json'

# –ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –ì–û–õ–û–í–ù–û–á Google-—Ç–∞–±–ª–∏—Ü—ñ
SPREADSHEET_NAME = "PustoBot"

# --- –ö–Ü–ù–ï–¶–¨ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ ---

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä–æ–ª–µ–π
ROLE_TO_COLUMN_BASE = {
    "–∫–ª—ñ–Ω": "–ö–ª—ñ–Ω",
    "–ø–µ—Ä–µ–∫–ª–∞–¥": "–ü–µ—Ä–µ–∫–ª–∞–¥",
    "—Ç–∞–π–ø": "–¢–∞–π–ø",
    "—Ä–µ–¥–∞–∫—Ç": "–†–µ–¥–∞–∫—Ç",
    "—Ä–µ–¥": "–†–µ–¥–∞–∫—Ç", # –î–æ–¥–∞—î–º–æ —Å–∏–Ω–æ–Ω—ñ–º
}
# –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è
PUBLISH_COLUMN_BASE = "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è"

# –û–ù–û–í–õ–ï–ù–û: –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [–†–æ–∑–¥—ñ–ª, –ö–ª—ñ–Ω-–ù—ñ–∫, –ö–ª—ñ–Ω-–î–∞—Ç–∞, –ö–ª—ñ–Ω-–°—Ç–∞—Ç—É—Å, –ü–µ—Ä–µ–∫–ª–∞–¥-–ù—ñ–∫, –ü–µ—Ä–µ–∫–ª–∞–¥-–î–∞—Ç–∞, –ü–µ—Ä–µ–∫–ª–∞–¥-–°—Ç–∞—Ç—É—Å, ...]
SHEET_HEADERS = ['–†–æ–∑–¥—ñ–ª']

# –î–æ–¥–∞—î–º–æ –ù—ñ–∫/–î–∞—Ç–∞/–°—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ä–æ–ª—ñ
for role in ROLE_TO_COLUMN_BASE.values():
    # –ü–æ—Ä—è–¥–æ–∫: –ù—ñ–∫, –î–∞—Ç–∞, –°—Ç–∞—Ç—É—Å
    SHEET_HEADERS.extend([f'{role}-–ù—ñ–∫', f'{role}-–î–∞—Ç–∞', f'{role}-–°—Ç–∞—Ç—É—Å'])

# –î–æ–¥–∞—î–º–æ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é
SHEET_HEADERS.extend([f'{PUBLISH_COLUMN_BASE}-–ù—ñ–∫', f'{PUBLISH_COLUMN_BASE}-–î–∞—Ç–∞', f'{PUBLISH_COLUMN_BASE}-–°—Ç–∞—Ç—É—Å'])

# –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø—Ä–∏–∫–ª–∞–¥): ['–†–æ–∑–¥—ñ–ª', '–ö–ª—ñ–Ω-–ù—ñ–∫', '–ö–ª—ñ–Ω-–î–∞—Ç–∞', '–ö–ª—ñ–Ω-–°—Ç–∞—Ç—É—Å', '–ü–µ—Ä–µ–∫–ª–∞–¥-–ù—ñ–∫', '–ü–µ—Ä–µ–∫–ª–∞–¥-–î–∞—Ç–∞', '–ü–µ—Ä–µ–∫–ª–∞–¥-–°—Ç–∞—Ç—É—Å', ...]


class SheetsHelper:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—ó –≤—Å—ñ—î—ó —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets."""
    def __init__(self, credentials_file, spreadsheet_name):
        try:
            gc = gspread.service_account(filename=credentials_file)
            self.spreadsheet = gc.open(spreadsheet_name)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets: {e}")
            self.spreadsheet = None

    def _get_or_create_worksheet(self, title_name):
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∞—Ä–∫—É—à –¥–ª—è —Ç–∞–π—Ç–ª—É."""
        if not self.spreadsheet: raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets.")
        try:
            return self.spreadsheet.worksheet(title_name)
        except gspread.WorksheetNotFound:
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä–∫—É—à–∞ –¥–ª—è —Ç–∞–π—Ç–ª—É: {title_name}")
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            worksheet = self.spreadsheet.add_worksheet(title=title_name, rows="100", cols=str(len(SHEET_HEADERS) + 2)) 
            worksheet.append_row(SHEET_HEADERS)
            return worksheet

    def register_user(self, user_id, username, nickname):
        """–†–µ—î—Å—Ç—Ä—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∞—Ä–∫—É—à—ñ 'Users'."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            users_sheet = self.spreadsheet.worksheet("Users")
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID (–∫–æ–ª–æ–Ω–∫–∞ 1)
            user_ids = users_sheet.col_values(1)
            
            # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –ø—É—Å—Ç–∞, col_values(1) –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if user_ids and str(user_id) in user_ids:
                row_index = user_ids.index(str(user_id)) + 1
                # –û–Ω–æ–≤–ª—é—î–º–æ –¢–µ“ë (–∫–æ–ª–æ–Ω–∫–∞ 2) —Ç–∞ –ù—ñ–∫ (–∫–æ–ª–æ–Ω–∫–∞ 3)
                users_sheet.update_cell(row_index, 2, username)
                users_sheet.update_cell(row_index, 3, nickname)
                return f"‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ù—ñ–∫–Ω–µ–π–º: {nickname}"
            else:
                # –¢–∞–±–ª–∏—Ü—è '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': Telegram-–Ω—ñ–∫ (ID), –¢–µ“ë, –ù—ñ–∫, –†–æ–ª—ñ
                users_sheet.append_row([str(user_id), username, nickname, '']) 
                return f"‚úÖ –í–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –ù—ñ–∫–Ω–µ–π–º: {nickname}"
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."

    def add_chapter(self, title_name, chapter_number):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ —Ç–∞–π—Ç–ª—É."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            worksheet = self._get_or_create_worksheet(title_name)
            chapters = worksheet.col_values(1)
            if str(chapter_number) in chapters:
                return f"‚ö†Ô∏è –†–æ–∑–¥—ñ–ª {chapter_number} –¥–ª—è '{title_name}' –≤–∂–µ —ñ—Å–Ω—É—î."
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫: –†–æ–∑–¥—ñ–ª, –ø–æ—Ç—ñ–º –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ä–æ–ª—ñ [–ù—ñ–∫, –î–∞—Ç–∞, –°—Ç–∞—Ç—É—Å='‚ùå']
            new_row_data = [str(chapter_number)] # –†–æ–∑–¥—ñ–ª
            
            for _ in ROLE_TO_COLUMN_BASE:
                 new_row_data.extend(['', '', '‚ùå']) # '–ù—ñ–∫', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å'
            
            new_row_data.extend(['', '', '‚ùå']) # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è: '–ù—ñ–∫', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å'

            worksheet.append_row(new_row_data)
            return f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª {chapter_number} –¥–æ —Ç–∞–π—Ç–ª—É '{title_name}'."
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–æ–∑–¥—ñ–ª—É."

    def get_status(self, title_name):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –¥–ª—è —Ç–∞–π—Ç–ª—É."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            worksheet = self.spreadsheet.worksheet(title_name)
            all_values = worksheet.get_all_values()
            if len(all_values) <= 1:
                 return f"üìä –î–ª—è —Ç–∞–π—Ç–ª—É '{title_name}' —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É."
            
            headers = all_values[0]
            records = all_values[1:]

            response = [f"üìä *–°—Ç–∞—Ç—É—Å —Ç–∞–π—Ç–ª—É '{title_name}':*\n"]
            
            # –Ü–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Ä–æ–∑–¥—ñ–ª—É
            chapter_index = headers.index('–†–æ–∑–¥—ñ–ª')

            # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–ª–µ–π —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            role_definitions = list(ROLE_TO_COLUMN_BASE.items()) + [("–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è", PUBLISH_COLUMN_BASE)]

            for row in records:
                chapter = row[chapter_index]
                statuses = []
                
                for role_key, role_base_name in role_definitions:
                    # –ü–æ—à—É–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ù—ñ–∫/–î–∞—Ç–∞/–°—Ç–∞—Ç—É—Å
                    nick_col_name = f'{role_base_name}-–ù—ñ–∫'
                    date_col_name = f'{role_base_name}-–î–∞—Ç–∞'
                    status_col_name = f'{role_base_name}-–°—Ç–∞—Ç—É—Å'
                    
                    try:
                        nick_index = headers.index(nick_col_name)
                        date_index = headers.index(date_col_name)
                        status_index = headers.index(status_col_name)
                        
                        nick_value = row[nick_index].strip()
                        date_value = row[date_index].strip()
                        status_value = row[status_index].strip()
                        
                        status_char = "‚úÖ" if status_value == '‚úÖ' else "‚ùå"
                        info = []
                        if nick_value:
                            info.append(nick_value)
                        if date_value:
                            info.append(date_value)
                        
                        info_str = f" ({' | '.join(info)})" if info else ""
                        
                        statuses.append(f"*{role_key}*: {status_char}{info_str}")
                    except ValueError:
                        statuses.append(f"*{role_key}*: ‚ö†Ô∏è (–ü–æ–º–∏–ª–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞)") 

                response.append(f"*{chapter}* ‚Äî _{' | '.join(statuses)}_")
            return "\n".join(response)
        except gspread.WorksheetNotFound:
            return f"‚ö†Ô∏è –¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É."

    def update_chapter_status(self, title_name, chapter_number, role, status_char, nickname):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç—É —Ç–∞ –Ω—ñ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ä–æ–ª—ñ."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        
        role_lower = role.lower()
        role_base_name = None
        
        if role_lower == '–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è':
            role_base_name = PUBLISH_COLUMN_BASE
        elif role_lower in ROLE_TO_COLUMN_BASE:
            role_base_name = ROLE_TO_COLUMN_BASE[role_lower]
        else:
            return f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å '{role}'. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(ROLE_TO_COLUMN_BASE.keys())}, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è"
            
        try:
            worksheet = self.spreadsheet.worksheet(title_name)
            
            # –ü–æ—à—É–∫ —Ä—è–¥–∫–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–æ–∑–¥—ñ–ª—É
            cell = worksheet.find(str(chapter_number), in_column=1) 
            if not cell:
                return f"‚ö†Ô∏è –†–æ–∑–¥—ñ–ª {chapter_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–π—Ç–ª—ñ '{title_name}'."
            
            headers = worksheet.row_values(1)
            row_index = cell.row
            
            new_status_char = '‚úÖ' if status_char == '+' else '‚ùå'
            current_date = datetime.now().strftime("%d.%m")
            
            # –ü–æ—à—É–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ü—ñ—î—ó —Ä–æ–ª—ñ
            nick_col_name = f'{role_base_name}-–ù—ñ–∫'
            date_col_name = f'{role_base_name}-–î–∞—Ç–∞'
            status_col_name = f'{role_base_name}-–°—Ç–∞—Ç—É—Å'

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö —Ç—Ä—å–æ—Ö –∫–æ–ª–æ–Ω–æ–∫
            if not all(col in headers for col in [nick_col_name, date_col_name, status_col_name]):
                return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–æ–ª—ñ '{role_base_name}'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ."
            
            nick_index = headers.index(nick_col_name) + 1
            date_index = headers.index(date_col_name) + 1
            status_index = headers.index(status_col_name) + 1
            
            # 1. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            worksheet.update_cell(row_index, status_index, new_status_char)
            
            # 2. –û–Ω–æ–≤–ª—é—î–º–æ –ù—ñ–∫ —Ç–∞ –î–∞—Ç—É
            if status_char == '+':
                worksheet.update_cell(row_index, date_index, current_date)
                worksheet.update_cell(row_index, nick_index, nickname)
            else:
                # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å —Å–∫–∏–¥–∞—î—Ç—å—Å—è ('-'), –æ—á–∏—â—É—î–º–æ –ù—ñ–∫ —Ç–∞ –î–∞—Ç—É
                worksheet.update_cell(row_index, date_index, '')
                worksheet.update_cell(row_index, nick_index, '')

            return f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: '{title_name}', —Ä–æ–∑–¥—ñ–ª {chapter_number}, —Ä–æ–ª—å {role_lower} ‚Üí {status_char} (–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {nickname})"
        
        except gspread.WorksheetNotFound:
            return f"‚ö†Ô∏è –¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except ValueError as ve: 
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏: {ve}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ: {ve}"
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É."

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ —Ç–∞–π—Ç–ª–∞–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "üë§ `/register <–Ω—ñ–∫–Ω–µ–π–º>`\n_–†–µ—î—Å—Ç—Ä—É—î –≤–∞—Å —É —Å–∏—Å—Ç–µ–º—ñ._\n\n"
        "‚ûï `/newchapter \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\" <–Ω–æ–º–µ—Ä_—Ä–æ–∑–¥—ñ–ª—É>`\n_–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–æ —Ç–∞–π—Ç–ª—É. –ù–∞–∑–≤—É –±—Ä–∞—Ç–∏ –≤ –ª–∞–ø–∫–∏!_\n\n"
        "üìä `/status \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\"`\n_–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ —Ç–∞–π—Ç–ª—É._\n\n"
        "üîÑ `/updatestatus \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\" <—Ä–æ–∑–¥—ñ–ª> <—Ä–æ–ª—å> <+|-> [–Ω—ñ–∫]`\n_–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è. –ù—ñ–∫ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π. –†–æ–ª—ñ: –∫–ª—ñ–Ω, –ø–µ—Ä–µ–∫–ª–∞–¥, —Ç–∞–π–ø, —Ä–µ–¥–∞–∫—Ç, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è._"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º. –ü—Ä–∏–∫–ª–∞–¥: `/register SuperTranslator`")
        return
    nickname = " ".join(context.args)
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    # Telegram-—Ç–µ–≥ –±–µ—Ä–µ–º–æ –∑ username, —è–∫—â–æ —î, –∞–±–æ –∑ —ñ–º–µ–Ω—ñ
    telegram_tag = f"@{user.username}" if user.username else user.full_name
    response = sheets.register_user(user.id, telegram_tag, nickname)
    await update.message.reply_text(response)

def parse_title_and_args(text):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, —â–æ –º—ñ—Å—Ç—è—Ç—å –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É –≤ –ª–∞–ø–∫–∞—Ö."""
    match = re.search(r'\"(.*?)\"', text)
    if not match:
        return None, text.strip().split() # –Ø–∫—â–æ –ª–∞–ø–æ–∫ –Ω–µ–º–∞—î, –Ω–∞–∑–≤–∏ —Ç–∞–π—Ç–ª—É —Ç–µ–∂ –Ω–µ–º–∞—î
    title = match.group(1)
    remaining_args = text[match.end():].strip().split()
    return title, remaining_args

async def new_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, args = parse_title_and_args(full_text)
    if not title or len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/newchapter "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞" 15`')
        return
    chapter = args[0]
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.add_chapter(title, chapter)
    await update.message.reply_text(response)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, _ = parse_title_and_args(full_text)
    if not title:
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/status "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞"`')
        return
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.get_status(title)
    await update.message.reply_text(response, parse_mode="Markdown")

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, args = parse_title_and_args(full_text)
    
    # –û—á—ñ–∫—É—î–º–æ 3 –∞–±–æ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏: –ù–æ–º–µ—Ä —Ä–æ–∑–¥—ñ–ª—É, –†–æ–ª—å, +/-, [–ù—ñ–∫]
    if not title or len(args) < 3 or len(args) > 4 or not args[0].isdigit() or args[2] not in ['+', '-']:
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/updatestatus "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞" 15 –∫–ª—ñ–Ω + <–Ω—ñ–∫>`')
        return
    
    chapter, role, status_char = args[0], args[1], args[2]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω—ñ–∫: —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π. –Ü–Ω–∞–∫—à–µ - Telegram-–Ω—ñ–∫.
    if len(args) == 4:
        nickname = args[3] # –ù—ñ–∫ –≤–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–º–∞–Ω–¥—ñ
    else:
        # –ù—ñ–∫ –±–µ—Ä–µ—Ç—å—Å—è –∑ Telegram-–ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        nickname = update.effective_user.first_name 
        if update.effective_user.username:
            nickname = f"@{update.effective_user.username}"

    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.update_chapter_status(title, chapter, role, status_char, nickname)
    await update.message.reply_text(response)


# --- –ê–°–ò–ù–•–†–û–ù–ù–ò–ô –ó–ê–ü–£–°–ö –î–õ–Ø WEBHOOKS ---

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    
    # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application
    bot_app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("help", help_command))
    bot_app.add_handler(CommandHandler("register", register))
    bot_app.add_handler(CommandHandler("newchapter", new_chapter))
    bot_app.add_handler(CommandHandler("status", status))
    bot_app.add_handler(CommandHandler("updatestatus", update_status))
    
    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤
    await bot_app.initialize()
    await bot_app.start() # –ó–∞–ø—É—Å–∫–∞—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ü–∏–∫–ª–∏ Application
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ Application –º–∞—î —á–µ—Ä–≥—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
    if not hasattr(bot_app, 'update_queue'):
        logger.error("bot_app has no update_queue attribute!")
        return
        
    # 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ aiohttp
    aio_app = web.Application()
    aio_app['bot_app'] = bot_app # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Application —É –¥–æ–¥–∞—Ç–∫—É aiohttp
    
    async def webhook_handler(request):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Ö—ñ–¥–Ω–∏—Ö POST-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Telegram."""
        bot_app = request.app['bot_app']
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
        try:
            update = Update.de_json(await request.json(), bot_app.bot)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
            return web.Response(status=400)
            
        # –ü–æ–º—ñ—â–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É Application
        await bot_app.update_queue.put(update)
        return web.Response() # Telegram –æ—á—ñ–∫—É—î 200 OK
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ Telegram
    webhook_path = '/' + TELEGRAM_BOT_TOKEN
    full_webhook_url = WEBHOOK_URL.rstrip('/') + webhook_path
    
    await bot_app.bot.set_webhook(url=full_webhook_url)
    logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Webhook –Ω–∞: {full_webhook_url}")
    
    # 4. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ aiohttp
    aio_app.add_routes([
        web.get('/health', lambda r: web.Response(text='OK')), # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
        web.post(webhook_path, webhook_handler), # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram
    ])

    # 5. –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(aio_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 8080))
    # '0.0.0.0' –¥–æ–∑–≤–æ–ª—è—î —Å–ª—É—Ö–∞—Ç–∏ –Ω–∞ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–≤–∞–∂–ª–∏–≤–æ –¥–ª—è Render)
    site = web.TCPSite(runner, '0.0.0.0', port) 
    logger.info(f"Starting web server on port {port}")
    await site.start()

    # –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Error in main execution: {e}")