import logging
import re
import gspread
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –í–ö–ê–ñ–Ü–¢–¨ –í–ê–®–Ü –î–ê–ù–Ü –¢–£–¢ ---

# –í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7392593867:AAHSNWTbZxS4BfEKJa3KG7SuhK2G9R5kKQA"

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –∑ –∫–ª—é—á–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ Google API
GOOGLE_CREDENTIALS_FILE = 'credentials.json'

# –ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –ì–û–õ–û–í–ù–û–á Google-—Ç–∞–±–ª–∏—Ü—ñ
SPREADSHEET_NAME = "PustoBot"

# --- –ö–Ü–ù–ï–¶–¨ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ ---

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä–æ–ª–µ–π —Ç–∞ —ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
ROLE_TO_COLUMN = {
    "–∫–ª—ñ–Ω": "–ö–ª—ñ–Ω",
    "–ø–µ—Ä–µ–∫–ª–∞–¥": "–ü–µ—Ä–µ–∫–ª–∞–¥",
    "—Ç–∞–π–ø": "–¢–∞–π–ø",
    "—Ä–µ–¥–∞–∫—Ç": "–†–µ–¥–∞–∫—Ç",
    "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è": "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è"
}
SHEET_HEADERS = ['–†–æ–∑–¥—ñ–ª', '–ö–ª—ñ–Ω', '–ü–µ—Ä–µ–∫–ª–∞–¥', '–¢–∞–π–ø', '–†–µ–¥–∞–∫—Ç', '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è']

class SheetsHelper:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—ó –≤—Å—ñ—î—ó —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets."""
    def __init__(self, credentials_file, spreadsheet_name):
        try:
            gc = gspread.service_account(filename=credentials_file)
            self.spreadsheet = gc.open(spreadsheet_name)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets: {e}")
            self.spreadsheet = None

    def _get_or_create_worksheet(self, title_name):
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∞—Ä–∫—É—à –¥–ª—è —Ç–∞–π—Ç–ª—É."""
        try:
            return self.spreadsheet.worksheet(title_name)
        except gspread.WorksheetNotFound:
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä–∫—É—à–∞ –¥–ª—è —Ç–∞–π—Ç–ª—É: {title_name}")
            worksheet = self.spreadsheet.add_worksheet(title=title_name, rows="100", cols="10")
            worksheet.append_row(SHEET_HEADERS)
            return worksheet

    def register_user(self, user_id, username, nickname):
        """–†–µ—î—Å—Ç—Ä—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∞—Ä–∫—É—à—ñ 'Users'."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            users_sheet = self.spreadsheet.worksheet("Users")
            user_ids = users_sheet.col_values(1)
            if str(user_id) in user_ids:
                row_index = user_ids.index(str(user_id)) + 1
                users_sheet.update_cell(row_index, 2, username)
                users_sheet.update_cell(row_index, 3, nickname)
                return f"‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ù—ñ–∫–Ω–µ–π–º: {nickname}"
            else:
                users_sheet.append_row([str(user_id), username, nickname])
                return f"‚úÖ –í–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –ù—ñ–∫–Ω–µ–π–º: {nickname}"
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."

    def add_chapter(self, title_name, chapter_number):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ —Ç–∞–π—Ç–ª—É."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            worksheet = self._get_or_create_worksheet(title_name)
            chapters = worksheet.col_values(1)
            if str(chapter_number) in chapters:
                return f"‚ö†Ô∏è –†–æ–∑–¥—ñ–ª {chapter_number} –¥–ª—è '{title_name}' –≤–∂–µ —ñ—Å–Ω—É—î."
            
            new_row = [str(chapter_number)] + ['FALSE'] * (len(SHEET_HEADERS) - 1)
            worksheet.append_row(new_row)
            return f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª {chapter_number} –¥–æ —Ç–∞–π—Ç–ª—É '{title_name}'."
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–æ–∑–¥—ñ–ª—É."

    def get_status(self, title_name):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –¥–ª—è —Ç–∞–π—Ç–ª—É."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        try:
            worksheet = self.spreadsheet.worksheet(title_name)
            records = worksheet.get_all_records()
            if not records:
                return f"üìä –î–ª—è —Ç–∞–π—Ç–ª—É '{title_name}' —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É."
            
            response = [f"üìä *–°—Ç–∞—Ç—É—Å —Ç–∞–π—Ç–ª—É '{title_name}':*\n"]
            for record in records:
                chapter = record['–†–æ–∑–¥—ñ–ª']
                statuses = []
                for role_key, col_name in ROLE_TO_COLUMN.items():
                    status_char = "‚úÖ" if record[col_name] == 'TRUE' else "‚ùå"
                    statuses.append(f"{role_key}: {status_char}")
                response.append(f"*{chapter}* ‚Äî _{' | '.join(statuses)}_")
            return "\n".join(response)
        except gspread.WorksheetNotFound:
            return f"‚ö†Ô∏è –¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É."

    def update_chapter_status(self, title_name, chapter_number, role, status_char):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ä–æ–ª—ñ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É."""
        if not self.spreadsheet: return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."
        if role.lower() not in ROLE_TO_COLUMN:
            return f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å '{role}'. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(ROLE_TO_COLUMN.keys())}"
        
        try:
            worksheet = self.spreadsheet.worksheet(title_name)
            cell = worksheet.find(str(chapter_number))
            if not cell:
                return f"‚ö†Ô∏è –†–æ–∑–¥—ñ–ª {chapter_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–π—Ç–ª—ñ '{title_name}'."
            
            col_name = ROLE_TO_COLUMN[role.lower()]
            headers = worksheet.row_values(1)
            col_index = headers.index(col_name) + 1
            
            new_status = 'TRUE' if status_char == '+' else 'FALSE'
            worksheet.update_cell(cell.row, col_index, new_status)
            
            return f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: '{title_name}', —Ä–æ–∑–¥—ñ–ª {chapter_number}, —Ä–æ–ª—å {role} ‚Üí {status_char}"
        except gspread.WorksheetNotFound:
            return f"‚ö†Ô∏è –¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except ValueError: # .index() fails
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ '{col_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ."
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É."

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ —Ç–∞–π—Ç–ª–∞–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "üë§ `/register <–Ω—ñ–∫–Ω–µ–π–º>`\n_–†–µ—î—Å—Ç—Ä—É—î –≤–∞—Å —É —Å–∏—Å—Ç–µ–º—ñ._\n\n"
        "‚ûï `/newchapter \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\" <–Ω–æ–º–µ—Ä_—Ä–æ–∑–¥—ñ–ª—É>`\n_–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–æ —Ç–∞–π—Ç–ª—É. –ù–∞–∑–≤—É –±—Ä–∞—Ç–∏ –≤ –ª–∞–ø–∫–∏!_\n\n"
        "üìä `/status \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\"`\n_–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ —Ç–∞–π—Ç–ª—É._\n\n"
        "üîÑ `/updatestatus \"–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É\" <–Ω–æ–º–µ—Ä_—Ä–æ–∑–¥—ñ–ª—É> <—Ä–æ–ª—å> <+|->`\n_–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è. –†–æ–ª—ñ: –∫–ª—ñ–Ω, –ø–µ—Ä–µ–∫–ª–∞–¥, —Ç–∞–π–ø, —Ä–µ–¥–∞–∫—Ç, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è._"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º. –ü—Ä–∏–∫–ª–∞–¥: `/register SuperTranslator`")
        return
    nickname = " ".join(context.args)
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.register_user(user.id, user.username or "N/A", nickname)
    await update.message.reply_text(response)

def parse_title_and_args(text):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, —â–æ –º—ñ—Å—Ç—è—Ç—å –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É –≤ –ª–∞–ø–∫–∞—Ö."""
    match = re.search(r'\"(.*?)\"', text)
    if not match:
        return None, None
    title = match.group(1)
    remaining_args = text[match.end():].strip().split()
    return title, remaining_args

async def new_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, args = parse_title_and_args(full_text)
    if not title or len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/newchapter "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞" 15`')
        return
    chapter = args[0]
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.add_chapter(title, chapter)
    await update.message.reply_text(response)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, _ = parse_title_and_args(full_text)
    if not title:
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/status "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞"`')
        return
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.get_status(title)
    await update.message.reply_text(response, parse_mode="Markdown")

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_text = " ".join(context.args)
    title, args = parse_title_and_args(full_text)
    if not title or len(args) != 3 or not args[0].isdigit() or args[2] not in ['+', '-']:
        await update.message.reply_text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `/updatestatus "–í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞" 15 –∫–ª—ñ–Ω +`')
        return
    chapter, role, status_char = args
    sheets = SheetsHelper(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
    response = sheets.update_chapter_status(title, chapter, role, status_char)
    await update.message.reply_text(response)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("newchapter", new_chapter))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("updatestatus", update_status))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()