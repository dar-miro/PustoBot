# PustoBot/handlers.py
import logging
from telegram import Update
from telegram.ext import ContextTypes
from .core import parse_message 
from .sheets import (
    update_title_table,
    append_log_row,
    resolve_user_nickname,
    get_title_number_and_name
)
from thread import get_thread_number 

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message when the command /start is issued."""
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî PustoBot, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏: /thread, /add, /status, /publish.")

async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, thread_title_or_number: str | None = None):
    """–°–ø—ñ–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—É /add."""
    from_user = update.message.from_user
    bot_username = context.bot.username
    
    # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    result = parse_message(text, thread_title_or_number, bot_username, from_user.username)
    
    if not result:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: `/add –ù–∞–∑–≤–∞ –†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` –∞–±–æ `/add –†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` —É –≥—ñ–ª—Ü—ñ —Ç–∞–π—Ç–ª—É.",
            parse_mode="Markdown"
        )
        return
    
    title_identifier = result['title_identifier']
    chapter = result['chapter']
    role = result['role']
    nickname_from_command = result.get('nickname') 

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω—ñ–∫–Ω–µ–π–º –¥–ª—è –∑–∞–ø–∏—Å—É –≤ —Ç–∞–±–ª–∏—Ü—é
    telegram_tag_for_resolution = from_user.username if from_user.username else from_user.full_name
    resolved_nickname = resolve_user_nickname(telegram_tag_for_resolution, nickname_from_command)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ (–∑–∞–≤–¥–∞–Ω–Ω—è 1)
    success_update = update_title_table(title_identifier, chapter, role, resolved_nickname)
    
    if success_update:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        full_title_name = title_identifier
        if title_identifier.isdigit():
             _, name = get_title_number_and_name(title_identifier)
             if name:
                 full_title_name = name

        telegram_tag = f"@{from_user.username}" if from_user.username else ""
        append_log_row(from_user.full_name, telegram_tag, full_title_name, chapter, role, resolved_nickname)
        await update.message.reply_text(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: *{full_title_name}* (—Ä–æ–∑–¥—ñ–ª *{chapter}*).", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å. –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–π—Ç–ª, –π–æ–≥–æ –Ω–æ–º–µ—Ä –∞–±–æ —Ä–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ä–æ–ª—ñ —á–µ—Ä–µ–∑ /add (–∑–∞–≤–¥–∞–Ω–Ω—è 1)."""
    message = update.message
    text = message.text[len("/add "):].strip() if message.text and len(message.text) > len("/add ") else ""
    # –û—Ç—Ä–∏–º—É—î–º–æ –ù–æ–º–µ—Ä –¢–∞–π—Ç–ª—É –∑ –≥—ñ–ª–∫–∏
    thread_number = get_thread_number(message.message_thread_id) 
    await process_input(update, context, text, thread_number) 

# –í–∏–¥–∞–ª–µ–Ω–æ async def handle_message(...)