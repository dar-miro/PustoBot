import logging
from telegram import Update
from telegram.ext import ContextTypes
from .core import parse_message
from .sheets import (
    update_title_table,
    append_log_row,
    NICKNAME_MAP, # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É
)
from thread import get_thread_title

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message when the command /start is issued."""
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî PustoBot, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Adds a new entry to the sheet via /add command."""
    message = update.message
    text = message.text[len("/add "):].strip() if message.text and len(message.text) > len("/add ") else ""
    thread_title = get_thread_title(message.message_thread_id)
    await process_input(update, context, text, thread_title)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles regular messages that mention the bot or are a reply."""
    message = update.message
    bot_username = f"@{context.bot.username}"
    text = message.text.strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if text.lower().startswith(bot_username.lower()):
        text = text[len(bot_username):].strip()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ñ–Ω—à–µ
    is_reply = bool(message.reply_to_message)
    thread_title = get_thread_title(message.message_thread_id)
    
    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –∞–±–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥—ñ–ª—Ü—ñ –∑ –Ω–∞–∑–≤–æ—é, —Ç–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ
    if is_reply or thread_title:
        await process_input(update, context, text, thread_title)

async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, thread_title: str | None = None):
    """Common logic for processing user input for adding progress."""
    from_user = update.message.from_user
    bot_username = context.bot.username
    
    result = parse_message(text, thread_title, bot_username)
    
    if not result:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: `–ù–∞–∑–≤–∞ –†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` –∞–±–æ `–†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` —É –≥—ñ–ª—Ü—ñ —Ç–∞–π—Ç–ª—É.",
            parse_mode="Markdown"
        )
        return
    
    title, chapter, role, nickname = result

    # –Ø–∫—â–æ –Ω—ñ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –±–µ—Ä–µ–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if not nickname:
        nickname = from_user.full_name

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω—ñ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É NICKNAME_MAP
    resolved_nickname = NICKNAME_MAP.get(from_user.full_name, nickname)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Ç–∞–π—Ç–ª—ñ–≤
    success_update = update_title_table(title, chapter, role, resolved_nickname)
    
    if success_update:
        # –õ–æ–≥—É—î–º–æ –¥—ñ—é
        telegram_tag = from_user.username if from_user.username else ""
        append_log_row(from_user.full_name, telegram_tag, title, chapter, role, resolved_nickname)
        
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–∞–π—Ç–ª—É *{title}*, —Ä–æ–∑–¥—ñ–ª *{chapter}* ({role}: _{resolved_nickname}_).",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å. –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–π—Ç–ª –∞–±–æ —Ä–æ–∑–¥—ñ–ª *{title}* / *{chapter}* –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode="Markdown"
        )