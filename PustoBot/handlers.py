import logging
from telegram import Update
from telegram.ext import ContextTypes
from .core import parse_message
from .sheets import (
    get_title_sheet,
    update_title_table,
    append_log_row,
    load_nickname_map,
)

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫
active_threads = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message when the command /start is issued."""
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî PustoBot, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `/add` —â–æ–± –¥–æ–¥–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å, –∞–±–æ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet):
    """Adds a new entry to the sheet."""
    message = update.message
    if not message:
        logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è /add.")
        return
    
    text = message.text[len("/add "):].strip() if message.text and len(message.text) > len("/add ") else ""
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –≥—ñ–ª–∫–∏
    thread_title = getattr(message, "message_thread_title", None) or getattr(message, "message_thread_topic", None)
    
    await process_input(update, context, sheet, text, thread_title, context.bot.username)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet):
    """Handles regular messages that mention the bot or are a reply."""
    message = update.message
    if not message:
        logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è handle_message.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ —î –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    bot_username = f"@{context.bot.username}"
    text = message.text.strip()
    if text.startswith(bot_username):
        text = text[len(bot_username):].strip()
        
    thread_title = getattr(message, "message_thread_title", None) or getattr(message, "message_thread_topic", None)
    
    await process_input(update, context, sheet, text, thread_title, context.bot.username)

async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet, text, thread_title=None, bot_username=None):
    """Common logic for processing user input."""
    from_user = update.message.from_user
    
    result = parse_message(text, thread_title, bot_username)
    
    if not result:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ñ–æ—Ä–º–∞—Ç: "
            "`–ù–∞–∑–≤–∞ –†–æ–∑–¥—ñ–ª –†–æ–ª—å –ù—ñ–∫` –∞–±–æ `–†–æ–∑–¥—ñ–ª –†–æ–ª—å –ù—ñ–∫` (—è–∫—â–æ –Ω–∞–∑–≤–∞ –≥—ñ–ª–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞).",
            parse_mode="Markdown"
        )
        return
    
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: —Ä–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç parse_message, —è–∫–∏–π —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î role
    title, chapter, role, nickname = result

    if not nickname:
        nickname = from_user.full_name

    telegram_tag = from_user.username if from_user.username else ""

    nickname_map = load_nickname_map()
    # –Ø–∫—â–æ –Ω—ñ–∫–Ω–µ–π–º, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ –∫–æ–º–∞–Ω–¥–∏, —î –∫–ª—é—á–µ–º —É –º–∞–ø—ñ, –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞–ø–∏.
    # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î.
    nickname = nickname_map.get(nickname, nickname)

    if sheet is None:
        logger.error("Sheets object is None in process_input. Cannot update table or log.")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    success_update = update_title_table(title, chapter, role, nickname, sheet) # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—î–º–æ sheet
    if not success_update:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è '{title}' —Ä–æ–∑–¥—ñ–ª '{chapter}'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
        return
    
    append_log_row(from_user.full_name, telegram_tag, title, chapter, role, nickname)
    
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å: *{nickname}* - *{role}* –¥–æ —Ç–∞–π—Ç–ª—É *{title}* (—Ä–æ–∑–¥—ñ–ª *{chapter}*).", parse_mode="Markdown")