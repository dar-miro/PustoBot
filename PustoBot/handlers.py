# PustoBot/handlers.py
import logging
from telegram import Update
from telegram.ext import ContextTypes
from .core import parse_message
from .sheets import (
    update_title_table,
    append_log_row,
    load_nickname_map,
    initialize_header_map,
    NICKNAME_MAP
)
from thread import get_thread_title

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message when the command /start is issued."""
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî PustoBot, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤.")

async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, thread_title: str | None = None):
    """Common logic for processing user input for adding progress."""
    from_user = update.message.from_user
    bot_username = context.bot.username
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –ø–∞—Ä—Å–∏–Ω–≥—É
    result = parse_message(text, thread_title, bot_username)
    
    if not result:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: `–ù–∞–∑–≤–∞ –†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` –∞–±–æ `–†–æ–∑–¥—ñ–ª –†–æ–ª—å [–ù—ñ–∫]` —É –≥—ñ–ª—Ü—ñ —Ç–∞–π—Ç–ª—É.",
            parse_mode="Markdown"
        )
        return
    
    title, chapter, role, nickname = result
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω—ñ–∫–Ω–µ–π–º
    if nickname:
        resolved_nickname = nickname
    else:
        # –®—É–∫–∞—î–º–æ –Ω—ñ–∫–Ω–µ–π–º —É –º–∞–ø—ñ –∑–∞ Telegram-—Ç–µ–≥–æ–º
        telegram_tag = from_user.username.lower() if from_user.username else None
        if telegram_tag in NICKNAME_MAP:
            resolved_nickname = NICKNAME_MAP[telegram_tag][2]
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é `/register`."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    success_update = update_title_table(title, chapter, role, resolved_nickname)
    
    if success_update:
        # –õ–æ–≥—É—î–º–æ –¥—ñ—é
        telegram_tag = from_user.username if from_user.username else ""
        append_log_row(from_user.full_name, telegram_tag, title, chapter, role, resolved_nickname)
        await update.message.reply_text(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: *{title}* (—Ä–æ–∑–¥—ñ–ª *{chapter}*).", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å. –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–π—Ç–ª –∞–±–æ —Ä–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Adds a new entry to the sheet via /add command."""
    message = update.message
    text = message.text[len("/add "):].strip() if message.text and len(message.text) > len("/add ") else ""
    thread_title = get_thread_title(message.message_thread_id)
    await process_input(update, context, text, thread_title)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles regular messages that mention the bot or are a reply."""
    message = update.message
    bot_username = f"@{context.bot.username}"
    text = message.text.strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ–≥ –±–æ—Ç–∞ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–µ–∫—Å—Ç—É
    if text.startswith(bot_username):
        text = text[len(bot_username):].strip()
    
    thread_title = get_thread_title(message.message_thread_id)
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É
    await process_input(update, context, text, thread_title)