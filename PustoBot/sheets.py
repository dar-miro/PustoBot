# PustoBot/sheets.py
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
import re
import logging
import os
from collections import defaultdict

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
client = None
main_spreadsheet = None
log_sheet = None
titles_sheet = None
users_sheet = None
COLUMN_MAP = {}
NICKNAME_MAP = {}
ROLE_MAPPING = {
    "–∫–ª—ñ–Ω": "–ö–ª—ñ–Ω-–°—Ç–∞—Ç—É—Å",
    "–ø–µ—Ä–µ–∫–ª–∞–¥": "–ü–µ—Ä–µ–∫–ª–∞–¥-–°—Ç–∞—Ç—É—Å",
    "—Ç–∞–π–ø": "–¢–∞–π–ø-–°—Ç–∞—Ç—É—Å",
    "—Ä–µ–¥–∞–∫—Ç": "–†–µ–¥–∞–∫—Ç-–°—Ç–∞—Ç—É—Å",
    "—Ä–µ–¥": "–†–µ–¥–∞–∫—Ç-–°—Ç–∞—Ç—É—Å",
}
STATUS_DONE = "‚úÖ"
STATUS_TODO = "‚ùå"

def initialize_header_map():
    """
    –ß–∏—Ç–∞—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ '–¢–∞–π—Ç–ª–∏', –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Å–∫–ª–∞–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É,
    —ñ —Å—Ç–≤–æ—Ä—é—î –≥–ª–æ–±–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É –∫–æ–ª–æ–Ω–æ–∫.
    """
    global COLUMN_MAP
    if titles_sheet is None:
        logger.error("–ê—Ä–∫—É—à '–¢–∞–π—Ç–ª–∏' –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤.")
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö —Ä—è–¥–∫—ñ–≤
        all_headers = titles_sheet.get('1:2')
        if not all_headers or len(all_headers) < 2:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏. –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—è–¥–∫—ñ–≤.")
            return

        top_row = all_headers[0]
        second_row = all_headers[1]
        
        column_map = {}
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∫–∞—Ä—Ç—É –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
        for i, header in enumerate(top_row):
            if header:
                column_map[header.strip()] = i + 1
        
        # –î–æ–ø–æ–≤–Ω—é—î–º–æ –∫–∞—Ä—Ç—É –∑ –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∑ —Ä–æ–ª—è–º–∏
        current_role_base = None
        for i, header in enumerate(second_row):
            if header:
                current_role_base = header.strip()
            if current_role_base:
                full_header = f"{current_role_base}-{header.strip()}"
                column_map[full_header] = i + 1

        COLUMN_MAP = column_map
        logger.info("–ö–∞—Ä—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {e}")

def connect_to_google_sheets():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets API."""
    global client, main_spreadsheet, titles_sheet, users_sheet, log_sheet
    try:
        creds_json = os.environ.get("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            logger.error("–ó–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è 'GOOGLE_CREDENTIALS_JSON' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            return False
            
        creds = ServiceAccountCredentials.from_json_keyfile_dict(eval(creds_json), scope)
        client = gspread.authorize(creds)
        main_spreadsheet = client.open("PustoBot")
        titles_sheet = main_spreadsheet.worksheet("–¢–∞–π—Ç–ª–∏")
        users_sheet = main_spreadsheet.worksheet("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
        log_sheet = main_spreadsheet.worksheet("–ñ—É—Ä–Ω–∞–ª")
        initialize_header_map()
        load_nickname_map()
        return True
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets: {e}")
        return False

def load_nickname_map():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω—ñ–∫–Ω–µ–π–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞—Ä–∫—É—à–∞ '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'."""
    global NICKNAME_MAP
    if users_sheet is None:
        logger.error("–ê—Ä–∫—É—à '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ' –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return
    try:
        records = users_sheet.get_all_records()
        NICKNAME_MAP = {record['–¢–µ“ë'].lstrip('@').lower(): (record['Telegram-–Ω—ñ–∫'], record['–¢–µ“ë'], record['–ù—ñ–∫'], record['–†–æ–ª—ñ']) for record in records if record['–¢–µ“ë']}
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(NICKNAME_MAP)} –Ω—ñ–∫–Ω–µ–π–º—ñ–≤.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º—ñ–≤: {e}")

def resolve_user_nickname(telegram_tag):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º –∑–∞ Telegram-—Ç–µ–≥–æ–º."""
    if telegram_tag and telegram_tag.lower() in NICKNAME_MAP:
        return NICKNAME_MAP[telegram_tag.lower()][2]
    return None

def find_title_block(title_name):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä—è–¥–æ–∫ —Ç–∞–π—Ç–ª—É –≤ —Ç–∞–±–ª–∏—Ü—ñ '–¢–∞–π—Ç–ª–∏'."""
    if titles_sheet is None or not COLUMN_MAP:
        return None, None
    try:
        titles_column = titles_sheet.col_values(COLUMN_MAP.get("–¢–∞–π—Ç–ª–∏"))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —Ç–∞–π—Ç–ª—ñ–≤
        title_rows = {normalize_title(val): idx + 1 for idx, val in enumerate(titles_column) if val}
        normalized_title = normalize_title(title_name)

        if normalized_title in title_rows:
            start_row = title_rows[normalized_title]
            
            # –®—É–∫–∞—î–º–æ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∞–π—Ç–ª –∞–±–æ –∫—ñ–Ω–µ—Ü—å —Ç–∞–±–ª–∏—Ü—ñ
            end_row = titles_sheet.row_count
            for t_title, t_row in title_rows.items():
                if t_row > start_row and t_row < end_row:
                    end_row = t_row - 1
                    break
            
            return start_row, end_row

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –±–ª–æ–∫—É —Ç–∞–π—Ç–ª—É: {e}")
    
    return None, None
    
def find_chapter_row(title_start_row, title_end_row, chapter_number):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä—è–¥–æ–∫ —Ä–æ–∑–¥—ñ–ª—É –≤ –º–µ–∂–∞—Ö –±–ª–æ–∫—É —Ç–∞–π—Ç–ª—É."""
    if titles_sheet is None or not COLUMN_MAP:
        return None
    try:
        # –ó—á–∏—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–æ–º–µ—Ä–∞–º–∏ —Ä–æ–∑–¥—ñ–ª—ñ–≤ —É –º–µ–∂–∞—Ö –±–ª–æ–∫—É —Ç–∞–π—Ç–ª—É
        chapter_column_range = titles_sheet.range(
            f'A{title_start_row}:{len(COLUMN_MAP)}{title_end_row}'
        )
        for cell in chapter_column_range:
            if cell.col == COLUMN_MAP.get("–†–æ–∑–¥—ñ–ª ‚Ññ") and cell.value == chapter_number:
                return cell.row
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä—è–¥–∫–∞ —Ä–æ–∑–¥—ñ–ª—É: {e}")
    return None
    
def normalize_title(title):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É –¥–æ —î–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É."""
    return re.sub(r'[^\w]', '', title.lower().strip())

def update_title_table(title_name, chapter_number, role, nickname_to_set=None):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É."""
    if titles_sheet is None or not COLUMN_MAP:
        return False
    try:
        start_row, end_row = find_title_block(title_name)
        if start_row is None:
            logger.warning(f"–¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return False

        chapter_row = find_chapter_row(start_row, end_row, chapter_number)
        if chapter_row is None:
            logger.warning(f"–†–æ–∑–¥—ñ–ª '{chapter_number}' –¥–ª—è —Ç–∞–π—Ç–ª—É '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return False

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–∑–≤—É –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º—É
        role_base_name = ROLE_MAPPING.get(role)
        if not role_base_name:
            logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å: {role}")
            return False

        updates = []
        
        # üÜï –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –û–Ω–æ–≤–ª—é—î–º–æ –Ω—ñ–∫–Ω–µ–π–º, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –ø–µ—Ä–µ–¥–∞–Ω–∏–π
        if nickname_to_set and f"{role_base_name.split('-')[0]}-–ù—ñ–∫" in COLUMN_MAP:
            updates.append({'range': gspread.utils.rowcol_to_a1(chapter_row, COLUMN_MAP[f"{role_base_name.split('-')[0]}-–ù—ñ–∫"]), 'values': [[nickname_to_set]]})
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –Ω—ñ–∫–Ω–µ–π–º: {nickname_to_set}")
            
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É
        if f"{role_base_name.split('-')[0]}-–î–∞—Ç–∞" in COLUMN_MAP:
            current_date = datetime.now().strftime("%d.%m.%Y")
            updates.append({'range': gspread.utils.rowcol_to_a1(chapter_row, COLUMN_MAP[f"{role_base_name.split('-')[0]}-–î–∞—Ç–∞"]), 'values': [[current_date]]})
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É: {current_date}")
            
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        if role_base_name in COLUMN_MAP:
            updates.append({'range': gspread.utils.rowcol_to_a1(chapter_row, COLUMN_MAP[role_base_name]), 'values': [[STATUS_DONE]]})
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å: {STATUS_DONE}")

        if updates:
            titles_sheet.batch_update(updates)
            
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        return False
def append_log_row(telegram_full_name, telegram_tag, title, chapter, role, nickname):
    """–î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ –∞—Ä–∫—É—à–∞ '–ñ—É—Ä–Ω–∞–ª'."""
    if log_sheet is None:
        logger.error("–ê—Ä–∫—É—à '–ñ—É—Ä–Ω–∞–ª' –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return
    try:
        row = [
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            telegram_full_name,
            telegram_tag,
            title,
            chapter,
            role,
            nickname
        ]
        log_sheet.append_row(row)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É –≤ –∂—É—Ä–Ω–∞–ª: {e}")

def get_title_status_data(title_name):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–∞–Ω—ñ –ø–æ —Ç–∞–π—Ç–ª—É –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /status."""
    if not COLUMN_MAP:
        logger.error("–ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å.")
        return None, None
    
    start_row, end_row = find_title_block(title_name)
    if start_row is None:
        return None, None
        
    original_title = titles_sheet.cell(start_row, COLUMN_MAP["–¢–∞–π—Ç–ª–∏"]).value
    
    data_range_start_row = start_row + 4
    if data_range_start_row > end_row:
        return original_title, []
        
    data_range = titles_sheet.range(
        data_range_start_row, 1, end_row, len(COLUMN_MAP)
    )
    
    records = []
    
    for row_start_index in range(0, len(data_range), len(COLUMN_MAP)):
        row_data = data_range[row_start_index:row_start_index + len(COLUMN_MAP)]
        record = {}
        for cell in row_data:
            for key, col_idx in COLUMN_MAP.items():
                if col_idx == cell.col:
                    if "–†–æ–∑–¥—ñ–ª" in key and cell.value:
                        record['chapter'] = cell.value
                    elif "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è-–°—Ç–∞—Ç—É—Å" in key:
                        record['published'] = cell.value == "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"
                    else:
                        role_match = re.search(r'^(.*)-(–°—Ç–∞—Ç—É—Å|–î–∞—Ç–∞|–ù—ñ–∫)$', key)
                        if role_match:
                            role_key = role_match.group(1).lower()
                            data_type = role_match.group(2).lower()
                            if role_key not in record:
                                record[role_key] = {}
                            record[role_key][data_type] = cell.value
                    break
        if record:
            records.append(record)
    
    return original_title, records

def set_publish_status(title_name, chapter_number):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ä–æ–∑–¥—ñ–ª—É –Ω–∞ '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'."""
    if titles_sheet is None or not COLUMN_MAP:
        return "error", "–¢–∞–±–ª–∏—Ü—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ."

    try:
        start_row, end_row = find_title_block(title_name)
        if start_row is None:
            return "error", f"–¢–∞–π—Ç–ª '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        chapter_row = find_chapter_row(start_row, end_row, chapter_number)
        if chapter_row is None:
            return "error", f"–†–æ–∑–¥—ñ–ª '{chapter_number}' –¥–ª—è —Ç–∞–π—Ç–ª—É '{title_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        original_title = titles_sheet.cell(start_row, COLUMN_MAP["–¢–∞–π—Ç–ª–∏"]).value
        
        publish_col = COLUMN_MAP.get("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è-–°—Ç–∞—Ç—É—Å")
        if publish_col:
            titles_sheet.update_cell(chapter_row, publish_col, "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")
            return "success", original_title
        else:
            return "error", "–ö–æ–ª–æ–Ω–∫–∞ '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è-–°—Ç–∞—Ç—É—Å' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        return "error", f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}"

def set_main_roles(title_name, roles_map):
    """–ó–∞–ø–∏—Å—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö –∑–∞ —Ç–∞–π—Ç–ª."""
    if titles_sheet is None or not COLUMN_MAP:
        return False
    try:
        start_row, end_row = find_title_block(title_name)
        if start_row is None:
            return False
            
        update_range = []
        for role, nickname in roles_map.items():
            normalized_role = next((k for k, v in ROLE_MAPPING.items() if v.lower() == f"{role}-—Å—Ç–∞—Ç—É—Å"), None)
            if normalized_role:
                col_name = f"{normalized_role.capitalize()}-–ù—ñ–∫"
                if col_name in COLUMN_MAP:
                    col_index = COLUMN_MAP[col_name]
                    update_range.append({'range': gspread.utils.rowcol_to_a1(start_row, col_index), 'values': [[nickname]]})

        if update_range:
            titles_sheet.batch_update(update_range)
            return True
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö –∑–∞ —Ç–∞–π—Ç–ª: {e}")
    return False

def get_user_sheet():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∞—Ä–∫—É—à–∞ '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'."""
    return users_sheet

def find_user_row_by_nick_or_tag(nickname=None, telegram_tag=None):
    """–®—É–∫–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω—ñ–∫–æ–º –∞–±–æ —Ç–µ–≥–æ–º."""
    if users_sheet is None:
        return None
    
    try:
        records = users_sheet.get_all_records()
        for i, record in enumerate(records):
            if nickname and record['–ù—ñ–∫'] == nickname:
                return i + 2, record
            if telegram_tag and record['–¢–µ“ë'] and record['–¢–µ“ë'].lstrip('@').lower() == telegram_tag.lstrip('@').lower():
                return i + 2, record
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    return None, None

def update_user_row(row_index, new_data):
    """–û–Ω–æ–≤–ª—é—î —Ä—è–¥–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if users_sheet is None:
        return False
    
    try:
        # –ó—á–∏—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
        headers = users_sheet.row_values(1)
        update_list = []
        for key, value in new_data.items():
            try:
                col_index = headers.index(key) + 1
                update_list.append({'range': gspread.utils.rowcol_to_a1(row_index, col_index), 'values': [[value]]})
            except ValueError:
                logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{key}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ä–∫—É—à—ñ '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'.")
                continue
        
        if update_list:
            users_sheet.batch_update(update_list)
            return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    return False

def append_user_row(new_data):
    """–î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if users_sheet is None:
        return False
    
    try:
        headers = users_sheet.row_values(1)
        row = [new_data.get(header, '') for header in headers]
        users_sheet.append_row(row)
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    return False