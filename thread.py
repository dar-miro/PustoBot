from telegram import Update
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, filters
)

from PustoBot.sheets import set_main_roles, normalize_title, get_title_number_and_name # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç

# –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
ASK_TITLE_AND_NUMBER, ASK_MEMBERS = range(2) 

# üß† –ü–∞–º º—è—Ç—å —Ç–∞–π—Ç–ª—ñ–≤ –∑–∞ –≥—ñ–ª–∫–æ—é: { thread_id: (title_number, original_title) }
thread_title_map = {} 

def set_thread_title_and_number(thread_id, title_number, title_name):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–∏–≤'—è–∑–∫—É –≥—ñ–ª–∫–∞ ‚Üí (–ù–æ–º–µ—Ä, –ù–∞–∑–≤–∞)."""
    thread_title_map[thread_id] = (title_number, title_name)

def get_thread_title_and_number(thread_id):
    """–ü–æ–≤–µ—Ä—Ç–∞—î (title_number, title_name)."""
    return thread_title_map.get(thread_id, (None, None))

def get_thread_number(thread_id):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ –Ω–æ–º–µ—Ä —Ç–∞–π—Ç–ª—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö."""
    return thread_title_map.get(thread_id, (None, None))[0]

# üßµ /thread ‚Äî —Å—Ç–∞—Ä—Ç —Ä–æ–∑–º–æ–≤–∏. –¢–µ–ø–µ—Ä –æ—á—ñ–∫—É—î –ù–æ–º–µ—Ä —Ç–∞ –ù–∞–∑–≤—É.
async def thread_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ *–ù–æ–º–µ—Ä –¢–∞–π—Ç–ª—É* —Ç–∞ –π–æ–≥–æ *–ù–∞–∑–≤—É* –¥–ª—è —Ü—ñ—î—ó –≥—ñ–ª–∫–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `1 –í—ñ–¥—å–º–æ–≤–∞—Ä—Ç–∞`", parse_mode="Markdown")
    return ASK_TITLE_AND_NUMBER

# –û–±—Ä–æ–±–∫–∞ –ù–æ–º–µ—Ä–∞ —Ç–∞ –ù–∞–∑–≤–∏ —Ç–∞–π—Ç–ª—É
async def ask_title_and_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á—ñ–∫—É—î–º–æ: [–ù–æ–º–µ—Ä] [–ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É...]
    parts = update.message.text.strip().split(maxsplit=1)
    
    if len(parts) < 2 or not parts[0].isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: `1 –ù–∞–∑–≤–∞ –¢–∞–π—Ç–ª—É`")
        return ASK_TITLE_AND_NUMBER
        
    title_number = parts[0]
    title_name = parts[1]
    
    thread_id = update.message.message_thread_id or update.message.chat_id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏–≤ º—è–∑–∫—É –≥—ñ–ª–∫–∞ ‚Üí (–ù–æ–º–µ—Ä, –ù–∞–∑–≤–∞)
    set_thread_title_and_number(thread_id, title_number, title_name)
    context.user_data["title_number"] = title_number 
    context.user_data["original_title"] = title_name 

    await update.message.reply_text(
        f"‚úÖ –¢–∞–π—Ç–ª *‚Ññ{title_number} - {title_name}* –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ—î–∫—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`–∫–ª—ñ–Ω - Nick1, –ø–µ—Ä–µ–∫–ª–∞–¥ - Nick2, —Ç–∞–π–ø - Nick3, —Ä–µ–¥ - Nick4`",
        parse_mode="Markdown"
    )
    return ASK_MEMBERS

# –£—á–∞—Å–Ω–∏–∫–∏
async def ask_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    members_text = update.message.text.strip()
    title_number = context.user_data.get("title_number")

    roles_map = {}
    for part in members_text.split(","):
        if "-" in part:
            role, nick = [p.strip() for p in part.split("-", 1)]
            roles_map[role.lower()] = nick 

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –ù–æ–º–µ—Ä –¢–∞–π—Ç–ª—É —É —Ñ—É–Ω–∫—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    success = set_main_roles(title_number, roles_map) 

    if success:
        await update.message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–π—Ç–ª –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
    return ConversationHandler.END

# –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /threadNum
async def threadnum_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î [–Ω–∞–∑–≤–∞_—Ç–∞–π—Ç–ª—É - –Ω–æ–º–µ—Ä] –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—ñ–ª–∫–∏."""
    thread_id = update.message.message_thread_id or update.message.chat_id
    title_number, title_name = get_thread_title_and_number(thread_id)
    
    if title_number and title_name:
        await update.message.reply_text(f"*{title_name}* - *{title_number}*", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –≥—ñ–ª–∫–∞ –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∞ –¥–æ –∂–æ–¥–Ω–æ–≥–æ —Ç–∞–π—Ç–ª—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/thread` –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏.")


# –í–∏—Ö—ñ–¥
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# Handler –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ main.py
def get_thread_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("thread", thread_command)],
        states={
            ASK_TITLE_AND_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_title_and_number)],
            ASK_MEMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_members)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="thread_conversation",
        persistent=False
    )

def get_threadnum_handler():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /threadNum."""
    return CommandHandler("threadNum", threadnum_command)